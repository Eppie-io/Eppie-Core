using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Tuvi.Core
{
    public interface ITokenRefresher
    {
        Task<AuthToken> RefreshTokenAsync(string mailServiceName, string refreshToken, CancellationToken cancellationToken = default);
    }

    public struct AuthToken : IEquatable<AuthToken>
    {
        public TimeSpan ExpiresIn { get; set; }
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }


        public override bool Equals(object obj)
        {
            return obj is AuthToken token && Equals(token);
        }

        public bool Equals(AuthToken other)
        {
            return ExpiresIn.Equals(other.ExpiresIn) &&
                   AccessToken == other.AccessToken &&
                   RefreshToken == other.RefreshToken;
        }

        // This code was generated by Visual Studio
        public override int GetHashCode()
        {
            int hashCode = -1682732087;
            hashCode = hashCode * -1521134295 + ExpiresIn.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(AccessToken);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(RefreshToken);
            return hashCode;
        }

        public static bool operator ==(AuthToken left, AuthToken right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(AuthToken left, AuthToken right)
        {
            return !(left == right);
        }

        public void Update(AuthToken token)
        {
            ExpiresIn = token.ExpiresIn;

            if (!string.IsNullOrEmpty(token.AccessToken))
            {
                AccessToken = token.AccessToken;
            }

            if (!string.IsNullOrEmpty(token.RefreshToken))
            {
                RefreshToken = token.RefreshToken;
            }
        }
    }
}
